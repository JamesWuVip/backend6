name: CI/CD Pipeline

on:
  push:
    branches: [ main, dev, staging ]
  pull_request:
    branches: [ main, dev, staging ]

env:
  JAVA_VERSION: '17'
  MAVEN_OPTS: '-Xmx1024m'

jobs:
  # 测试阶段
  test:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/dev'
    
    services:
      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: test_password
          MYSQL_DATABASE: wanli_test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: --health-cmd="redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Wait for MySQL
      run: |
        until mysqladmin ping -h 127.0.0.1 -P 3306 -u root -ptest_password --silent; do
          echo 'Waiting for MySQL...'
          sleep 2
        done
    
    - name: Run unit tests
      run: |
        mvn clean test \
          -Dspring.profiles.active=unit-test \
          '-Dtest=!*IntegrationTest,!*E2ETest,!*SecurityTest'
    
    - name: Run integration tests
      run: |
        mvn test \
          -Dspring.profiles.active=integration \
          -Dspring.datasource.url=jdbc:mysql://localhost:3306/wanli_test \
          -Dspring.datasource.username=root \
          -Dspring.datasource.password=password \
          -Dspring.data.redis.host=localhost \
          -Dspring.data.redis.port=6379 \
          -Dtest="*IntegrationTest,DatabaseConnectionTest"
    
    - name: Generate test report
      run: mvn jacoco:report
    
    - name: Upload coverage reports
      uses: codecov/codecov-action@v3
      with:
        file: ./target/site/jacoco/jacoco.xml
        flags: unittests
        name: codecov-umbrella

  # 安全扫描
  security:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/dev'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Run Snyk to check for vulnerabilities
      uses: snyk/actions/maven@master
      continue-on-error: true
      env:
        SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
    
    - name: Initialize CodeQL
      uses: github/codeql-action/init@v2
      with:
        languages: java
    
    - name: Build for CodeQL
      run: mvn compile -DskipTests
    
    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v2

  # 部署到开发环境
  deploy-dev:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/dev' && github.event_name == 'push'
    environment: development
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Build JAR
      run: mvn clean package -DskipTests -Dspring.profiles.active=dev
    
    - name: Deploy to Railway (Dev)
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway environment dev
        railway up --service ${{ secrets.RAILWAY_SERVICE_NAME_DEV }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Run database migrations
      run: |
        railway run --service ${{ secrets.RAILWAY_SERVICE_NAME_DEV }} -- \
          mvn flyway:migrate \
          -Dflyway.url=${{ secrets.DEV_DATABASE_URL }} \
          -Dflyway.user=${{ secrets.DEV_DB_USERNAME }} \
          -Dflyway.password=${{ secrets.DEV_DB_PASSWORD }}
    
    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.DEV_APP_URL }}/api/actuator/health || exit 1

  # 部署到测试环境
  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/staging' && github.event_name == 'push'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Build JAR
      run: mvn clean package -DskipTests -Dspring.profiles.active=staging
    
    - name: Deploy to Railway (Staging)
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway environment staging
        railway up --service ${{ secrets.RAILWAY_SERVICE_NAME_STAGING }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Run database migrations
      run: |
        railway run --service ${{ secrets.RAILWAY_SERVICE_NAME_STAGING }} -- \
          mvn flyway:migrate \
          -Dflyway.url=${{ secrets.STAGING_DATABASE_URL }} \
          -Dflyway.user=${{ secrets.STAGING_DB_USERNAME }} \
          -Dflyway.password=${{ secrets.STAGING_DB_PASSWORD }}
    
    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.STAGING_APP_URL }}/api/actuator/health || exit 1
    
    - name: Run E2E tests
      run: |
        # 这里可以添加端到端测试
        echo "Running E2E tests against staging environment"
        # mvn test -Dtest=E2ETest -Dapp.url=${{ secrets.STAGING_APP_URL }}
    
    - name: Performance tests
      run: |
        # 这里可以添加性能测试
        echo "Running performance tests"
        # 可以使用 JMeter 或其他性能测试工具

  # 部署到生产环境
  deploy-prod:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up JDK ${{ env.JAVA_VERSION }}
      uses: actions/setup-java@v4
      with:
        java-version: ${{ env.JAVA_VERSION }}
        distribution: 'temurin'
        cache: maven
    
    - name: Build JAR
      run: mvn clean package -DskipTests -Dspring.profiles.active=prod
    
    - name: Deploy to Railway (Production)
      run: |
        curl -fsSL https://railway.app/install.sh | sh
        railway login --token ${{ secrets.RAILWAY_TOKEN }}
        railway environment production
        railway up --service ${{ secrets.RAILWAY_SERVICE_NAME_PROD }}
      env:
        RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
    
    - name: Run database migrations
      run: |
        railway run --service ${{ secrets.RAILWAY_SERVICE_NAME_PROD }} -- \
          mvn flyway:migrate \
          -Dflyway.url=${{ secrets.PROD_DATABASE_URL }} \
          -Dflyway.user=${{ secrets.PROD_DB_USERNAME }} \
          -Dflyway.password=${{ secrets.PROD_DB_PASSWORD }}
    
    - name: Health check
      run: |
        sleep 30
        curl -f ${{ secrets.PROD_APP_URL }}/api/actuator/health || exit 1
    
    - name: Notify deployment
      if: success()
      run: |
        echo "Production deployment successful!"
        # 这里可以添加 Slack 通知或其他通知方式
        # curl -X POST -H 'Content-type: application/json' \
        #   --data '{"text":"🚀 Production deployment successful!"}' \
        #   ${{ secrets.SLACK_WEBHOOK_URL }}